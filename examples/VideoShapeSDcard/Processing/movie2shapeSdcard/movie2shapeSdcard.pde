/*  OctoWS2811 movie2sdcard.pde - Convert video for SD card playing, with
      Teensy 3.1 running OctoWS2811 VideoSDcard.ino

    http://www.pjrc.com/teensy/td_libs_OctoWS2811.html
    Copyright (c) 2014 Paul Stoffregen, PJRC.COM, LLC

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
*/

// To configure this program, edit the following:
//
//  1: Change myMovie to open a video file of your choice    ;-)
//     Also change the output file name.
//
//  2: Edit ledWidth, ledHeight, ledLayout for your LEDs
//
//  3: Edit framerate.  This configures the speed VideoSDcard
//     will play your video data.  It's also critical for merging
//     audio to be played by Teensy 3.1's digital to analog output.
//

import processing.video.*;
import processing.serial.*;
import java.io.*;
import java.lang.reflect.Field;

// ledPhysLocs array stores the physical location lookup for every LED in use.
// Array indexes are:
//   - Port index
//   - LED strip index (Must have 8 LED strips)
//   - LED index (All strips must have the same number of LED positions)
//   - x,y coordinate. {0, 0} is used as a placeholder to make all LED strips 
//      have the same length and fill empty strips.
// E.g.:
// int[][][][] ledPhysLocs  = new int[][][][]
// { // Ports
//   { // Strips
//     {{ 2, 1},{ 4, 1},{ 6, 1},{ 8, 1},{10, 1},{12, 1},{14, 1},{ 0, 0}},
//     {{ 2, 3},{ 4, 3},{ 6, 3},{ 8, 3},{10, 3},{12, 3},{14, 3},{ 0, 0}},
//     {{ 2, 5},{ 4, 5},{ 6, 5},{ 8, 5},{10, 5},{12, 5},{14, 5},{ 0, 0}},
//     {{ 2, 7},{ 4, 7},{ 6, 7},{ 8, 7},{10, 7},{12, 7},{14, 7},{ 0, 0}},
//     {{15, 2},{13, 2},{11, 2},{ 9, 2},{ 7, 2},{ 5, 2},{ 3, 2},{ 1, 2}},
//     {{15, 4},{13, 4},{11, 4},{ 9, 4},{ 7, 4},{ 5, 4},{ 3, 4},{ 1, 4}},
//     {{15, 6},{13, 6},{11, 6},{ 9, 6},{ 7, 6},{ 5, 6},{ 3, 6},{ 1, 6}},
//     {{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0}}
//   }
// };


// LED Sun array
int[][][][] ledPhysLocs  = new int[][][][]
{ // Ports
  { // Strips
    {{41, 1},{43, 1},{45, 1},{47, 1},{49, 1},{57, 3},{55, 3},{53, 3},{51, 3},{49, 3},{47, 3},{45, 3},{43, 3},{41, 3},{39, 3},{37, 3},{35, 3},{33, 3},{27, 5},{29, 5},{31, 5},{33, 5},{35, 5},{37, 5},{39, 5},{41, 5},{43, 5},{45, 5},{47, 5},{49, 5},{51, 5},{53, 5},{55, 5},{57, 5},{59, 5},{61, 5},{63, 5},{67, 7},{65, 7},{63, 7},{61, 7},{59, 7},{57, 7},{55, 7},{53, 7},{51, 7},{49, 7},{47, 7},{45, 7},{43, 7},{41, 7},{39, 7},{37, 7},{35, 7},{33, 7},{31, 7},{29, 7},{27, 7},{25, 7},{23, 7},{21, 9},{23, 9},{25, 9},{27, 9},{29, 9},{31, 9},{33, 9},{35, 9},{37, 9},{39, 9},{41, 9},{43, 9},{45, 9},{47, 9},{49, 9},{51, 9},{53, 9},{55, 9},{57, 9},{59, 9},{61, 9},{63, 9},{65, 9},{67, 9},{69, 9},{73,11},{71,11},{69,11},{67,11},{65,11},{63,11},{61,11},{59,11},{57,11},{55,11},{53,11},{51,11},{49,11},{47,11},{45,11},{43,11},{41,11},{39,11},{37,11},{35,11},{33,11},{31,11},{29,11},{27,11},{25,11},{23,11},{21,11},{19,11},{17,11},{15,13},{17,13},{19,13},{21,13},{23,13},{25,13},{27,13},{29,13},{31,13},{33,13},{35,13},{37,13},{39,13},{41,13},{43,13},{45,13},{47,13},{49,13},{51,13},{53,13},{55,13},{57,13},{59,13},{61,13},{63,13},{65,13},{67,13},{69,13},{71,13},{73,13},{75,13},{77,15},{75,15},{73,15},{71,15},{69,15},{67,15},{65,15},{63,15},{61,15},{59,15},{57,15},{55,15},{53,15},{51,15},{49,15},{47,15},{45,15},{43,15},{41,15},{39,15},{37,15},{35,15},{33,15},{31,15},{29,15},{27,15},{25,15},{23,15},{21,15},{19,15},{17,15},{15,15},{13,15},{13,17},{15,17},{17,17},{19,17},{21,17},{23,17},{25,17},{27,17},{29,17},{31,17},{33,17},{35,17},{37,17},{39,17},{41,17},{43,17},{45,17},{47,17},{49,17},{51,17},{53,17},{55,17},{57,17},{59,17},{61,17},{63,17},{65,17},{67,17},{69,17},{71,17},{73,17},{75,17},{77,17},{79,19},{77,19},{75,19},{73,19},{71,19},{69,19},{67,19},{65,19},{63,19},{61,19},{59,19},{57,19},{55,19},{53,19},{51,19},{49,19},{47,19},{45,19},{43,19},{41,19},{39,19},{37,19},{35,19},{33,19},{31,19},{29,19},{27,19},{25,19},{23,19},{21,19},{19,19},{17,19},{15,19},{13,19},{11,19},{ 9,21},{11,21},{13,21},{15,21},{17,21},{19,21},{21,21},{23,21},{25,21},{27,21},{29,21},{31,21},{33,21},{35,21},{37,21},{39,21},{41,21},{43,21},{45,21},{47,21},{49,21},{51,21},{53,21},{55,21},{57,21},{59,21},{61,21},{63,21},{65,21},{67,21},{69,21},{71,21},{73,21},{75,21},{77,21},{79,21},{81,21},{83,23},{81,23},{79,23},{77,23},{75,23},{73,23},{71,23},{69,23},{67,23},{65,23},{63,23},{61,23},{59,23},{57,23},{55,23},{53,23},{51,23},{49,23},{47,23},{45,23},{43,23},{41,23},{39,23},{37,23},{35,23},{33,23},{31,23},{29,23},{27,23},{25,23},{23,23},{21,23},{19,23},{17,23},{15,23},{13,23},{11,23},{ 9,23},{ 7,23},{ 7,25},{ 9,25},{11,25},{13,25},{15,25},{17,25},{19,25},{21,25},{23,25},{25,25},{27,25},{29,25},{31,25},{33,25},{35,25},{37,25},{39,25},{41,25},{43,25},{45,25},{47,25},{49,25},{51,25},{53,25},{55,25},{57,25},{59,25},{61,25},{63,25},{65,25},{67,25},{69,25},{71,25},{73,25},{75,25},{77,25},{79,25},{81,25},{83,25},{83,27},{81,27},{79,27},{77,27},{75,27},{73,27},{71,27},{69,27},{67,27},{65,27},{63,27},{61,27},{59,27},{57,27},{55,27},{53,27},{51,27},{49,27},{47,27},{45,27},{43,27}},
    {{36, 2},{38, 2},{40, 2},{42, 2},{44, 2},{46, 2},{48, 2},{50, 2},{52, 2},{54, 2},{60, 4},{58, 4},{56, 4},{54, 4},{52, 4},{50, 4},{48, 4},{46, 4},{44, 4},{42, 4},{40, 4},{38, 4},{36, 4},{34, 4},{32, 4},{30, 4},{26, 6},{28, 6},{30, 6},{32, 6},{34, 6},{36, 6},{38, 6},{40, 6},{42, 6},{44, 6},{46, 6},{48, 6},{50, 6},{52, 6},{54, 6},{56, 6},{58, 6},{60, 6},{62, 6},{64, 6},{68, 8},{66, 8},{64, 8},{62, 8},{60, 8},{58, 8},{56, 8},{54, 8},{52, 8},{50, 8},{48, 8},{46, 8},{44, 8},{42, 8},{40, 8},{38, 8},{36, 8},{34, 8},{32, 8},{30, 8},{28, 8},{26, 8},{24, 8},{22, 8},{20,10},{22,10},{24,10},{26,10},{28,10},{30,10},{32,10},{34,10},{36,10},{38,10},{40,10},{42,10},{44,10},{46,10},{48,10},{50,10},{52,10},{54,10},{56,10},{58,10},{60,10},{62,10},{64,10},{66,10},{68,10},{70,10},{74,12},{72,12},{70,12},{68,12},{66,12},{64,12},{62,12},{60,12},{58,12},{56,12},{54,12},{52,12},{50,12},{48,12},{46,12},{44,12},{42,12},{40,12},{38,12},{36,12},{34,12},{32,12},{30,12},{28,12},{26,12},{24,12},{22,12},{20,12},{18,12},{16,12},{14,14},{16,14},{18,14},{20,14},{22,14},{24,14},{26,14},{28,14},{30,14},{32,14},{34,14},{36,14},{38,14},{40,14},{42,14},{44,14},{46,14},{48,14},{50,14},{52,14},{54,14},{56,14},{58,14},{60,14},{62,14},{64,14},{66,14},{68,14},{70,14},{72,14},{74,14},{76,14},{78,16},{76,16},{74,16},{72,16},{70,16},{68,16},{66,16},{64,16},{62,16},{60,16},{58,16},{56,16},{54,16},{52,16},{50,16},{48,16},{46,16},{44,16},{42,16},{40,16},{38,16},{36,16},{34,16},{32,16},{30,16},{28,16},{26,16},{24,16},{22,16},{20,16},{18,16},{16,16},{14,16},{12,16},{12,18},{14,18},{16,18},{18,18},{20,18},{22,18},{24,18},{26,18},{28,18},{30,18},{32,18},{34,18},{36,18},{38,18},{40,18},{42,18},{44,18},{46,18},{48,18},{50,18},{52,18},{54,18},{56,18},{58,18},{60,18},{62,18},{64,18},{66,18},{68,18},{70,18},{72,18},{74,18},{76,18},{78,18},{80,20},{78,20},{76,20},{74,20},{72,20},{70,20},{68,20},{66,20},{64,20},{62,20},{60,20},{58,20},{56,20},{54,20},{52,20},{50,20},{48,20},{46,20},{44,20},{42,20},{40,20},{38,20},{36,20},{34,20},{32,20},{30,20},{28,20},{26,20},{24,20},{22,20},{20,20},{18,20},{16,20},{14,20},{12,20},{10,20},{ 8,22},{10,22},{12,22},{14,22},{16,22},{18,22},{20,22},{22,22},{24,22},{26,22},{28,22},{30,22},{32,22},{34,22},{36,22},{38,22},{40,22},{42,22},{44,22},{46,22},{48,22},{50,22},{52,22},{54,22},{56,22},{58,22},{60,22},{62,22},{64,22},{66,22},{68,22},{70,22},{72,22},{74,22},{76,22},{78,22},{80,22},{82,22},{82,24},{80,24},{78,24},{76,24},{74,24},{72,24},{70,24},{68,24},{66,24},{64,24},{62,24},{60,24},{58,24},{56,24},{54,24},{52,24},{50,24},{48,24},{46,24},{44,24},{42,24},{40,24},{38,24},{36,24},{34,24},{32,24},{30,24},{28,24},{26,24},{24,24},{22,24},{20,24},{18,24},{16,24},{14,24},{12,24},{10,24},{ 8,24},{ 6,26},{ 8,26},{10,26},{12,26},{14,26},{16,26},{18,26},{20,26},{22,26},{24,26},{26,26},{28,26},{30,26},{32,26},{34,26},{36,26},{38,26},{40,26},{42,26},{44,26},{46,26},{48,26},{50,26},{52,26},{54,26},{56,26},{58,26},{60,26},{62,26},{64,26},{66,26},{68,26},{70,26},{72,26},{74,26},{76,26},{78,26},{80,26},{82,26},{84,26},{84,28},{82,28},{80,28},{78,28}},
    {{41,27},{39,27},{37,27},{35,27},{33,27},{31,27},{29,27},{27,27},{25,27},{23,27},{21,27},{19,27},{17,27},{15,27},{13,27},{11,27},{ 9,27},{ 7,27},{ 5,29},{ 7,29},{ 9,29},{11,29},{13,29},{15,29},{17,29},{19,29},{21,29},{23,29},{25,29},{27,29},{29,29},{31,29},{33,29},{35,29},{37,29},{39,29},{41,29},{43,29},{45,29},{47,29},{49,29},{51,29},{53,29},{55,29},{57,29},{59,29},{61,29},{63,29},{65,29},{67,29},{69,29},{71,29},{73,29},{75,29},{77,29},{79,29},{81,29},{83,29},{85,29},{85,31},{83,31},{81,31},{79,31},{77,31},{75,31},{73,31},{71,31},{69,31},{67,31},{65,31},{63,31},{61,31},{59,31},{57,31},{55,31},{53,31},{51,31},{49,31},{47,31},{45,31},{43,31},{41,31},{39,31},{37,31},{35,31},{33,31},{31,31},{29,31},{27,31},{25,31},{23,31},{21,31},{19,31},{17,31},{15,31},{13,31},{11,31},{ 9,31},{ 7,31},{ 5,31},{ 3,33},{ 5,33},{ 7,33},{ 9,33},{11,33},{13,33},{15,33},{17,33},{19,33},{21,33},{23,33},{25,33},{27,33},{29,33},{31,33},{33,33},{35,33},{37,33},{39,33},{41,33},{43,33},{45,33},{47,33},{49,33},{51,33},{53,33},{55,33},{57,33},{59,33},{61,33},{63,33},{65,33},{67,33},{69,33},{71,33},{73,33},{75,33},{77,33},{79,33},{81,33},{83,33},{85,33},{87,33},{87,35},{85,35},{83,35},{81,35},{79,35},{77,35},{75,35},{73,35},{71,35},{69,35},{67,35},{65,35},{63,35},{61,35},{59,35},{57,35},{55,35},{53,35},{51,35},{49,35},{47,35},{45,35},{43,35},{41,35},{39,35},{37,35},{35,35},{33,35},{31,35},{29,35},{27,35},{25,35},{23,35},{21,35},{19,35},{17,35},{15,35},{13,35},{11,35},{ 9,35},{ 7,35},{ 5,35},{ 3,35},{ 3,37},{ 5,37},{ 7,37},{ 9,37},{11,37},{13,37},{15,37},{17,37},{19,37},{21,37},{23,37},{25,37},{27,37},{29,37},{31,37},{33,37},{35,37},{37,37},{39,37},{41,37},{43,37},{45,37},{47,37},{49,37},{51,37},{53,37},{55,37},{57,37},{59,37},{61,37},{63,37},{65,37},{67,37},{69,37},{71,37},{73,37},{75,37},{77,37},{79,37},{81,37},{83,37},{85,37},{87,37},{87,39},{85,39},{83,39},{81,39},{79,39},{77,39},{75,39},{73,39},{71,39},{69,39},{67,39},{65,39},{63,39},{61,39},{59,39},{57,39},{55,39},{53,39},{51,39},{49,39},{47,39},{45,39},{43,39},{41,39},{39,39},{37,39},{35,39},{33,39},{31,39},{29,39},{27,39},{25,39},{23,39},{21,39},{19,39},{17,39},{15,39},{13,39},{11,39},{ 9,39},{ 7,39},{ 5,39},{ 3,39},{ 3,41},{ 5,41},{ 7,41},{ 9,41},{11,41},{13,41},{15,41},{17,41},{19,41},{21,41},{23,41},{25,41},{27,41},{29,41},{31,41},{33,41},{35,41},{37,41},{39,41},{41,41},{43,41},{45,41},{47,41},{49,41},{51,41},{53,41},{55,41},{57,41},{59,41},{61,41},{63,41},{65,41},{67,41},{69,41},{71,41},{73,41},{75,41},{77,41},{79,41},{81,41},{83,41},{85,41},{87,41},{87,43},{85,43},{83,43},{81,43},{79,43},{77,43},{75,43},{73,43},{71,43},{69,43},{67,43},{65,43},{63,43},{61,43},{59,43},{57,43},{55,43},{53,43},{51,43},{49,43},{47,43},{45,43},{43,43},{41,43},{39,43},{37,43},{35,43},{33,43},{31,43},{29,43},{27,43},{25,43},{23,43},{21,43},{19,43},{17,43},{15,43},{13,43},{11,43},{ 9,43},{ 7,43},{ 5,43},{ 3,43},{ 1,45},{ 3,45},{ 5,45},{ 7,45},{ 9,45},{11,45},{13,45},{15,45},{17,45},{19,45},{21,45},{23,45},{25,45},{27,45},{29,45},{31,45},{33,45},{35,45},{37,45},{39,45},{41,45},{43,45},{45,45},{47,45}},
    {{76,28},{74,28},{72,28},{70,28},{68,28},{66,28},{64,28},{62,28},{60,28},{58,28},{56,28},{54,28},{52,28},{50,28},{48,28},{46,28},{44,28},{42,28},{40,28},{38,28},{36,28},{34,28},{32,28},{30,28},{28,28},{26,28},{24,28},{22,28},{20,28},{18,28},{16,28},{14,28},{12,28},{10,28},{ 8,28},{ 6,28},{ 4,30},{ 6,30},{ 8,30},{10,30},{12,30},{14,30},{16,30},{18,30},{20,30},{22,30},{24,30},{26,30},{28,30},{30,30},{32,30},{34,30},{36,30},{38,30},{40,30},{42,30},{44,30},{46,30},{48,30},{50,30},{52,30},{54,30},{56,30},{58,30},{60,30},{62,30},{64,30},{66,30},{68,30},{70,30},{72,30},{74,30},{76,30},{78,30},{80,30},{82,30},{84,30},{86,30},{86,32},{84,32},{82,32},{80,32},{78,32},{76,32},{74,32},{72,32},{70,32},{68,32},{66,32},{64,32},{62,32},{60,32},{58,32},{56,32},{54,32},{52,32},{50,32},{48,32},{46,32},{44,32},{42,32},{40,32},{38,32},{36,32},{34,32},{32,32},{30,32},{28,32},{26,32},{24,32},{22,32},{20,32},{18,32},{16,32},{14,32},{12,32},{10,32},{ 8,32},{ 6,32},{ 4,32},{ 4,34},{ 6,34},{ 8,34},{10,34},{12,34},{14,34},{16,34},{18,34},{20,34},{22,34},{24,34},{26,34},{28,34},{30,34},{32,34},{34,34},{36,34},{38,34},{40,34},{42,34},{44,34},{46,34},{48,34},{50,34},{52,34},{54,34},{56,34},{58,34},{60,34},{62,34},{64,34},{66,34},{68,34},{70,34},{72,34},{74,34},{76,34},{78,34},{80,34},{82,34},{84,34},{86,34},{86,36},{84,36},{82,36},{80,36},{78,36},{76,36},{74,36},{72,36},{70,36},{68,36},{66,36},{64,36},{62,36},{60,36},{58,36},{56,36},{54,36},{52,36},{50,36},{48,36},{46,36},{44,36},{42,36},{40,36},{38,36},{36,36},{34,36},{32,36},{30,36},{28,36},{26,36},{24,36},{22,36},{20,36},{18,36},{16,36},{14,36},{12,36},{10,36},{ 8,36},{ 6,36},{ 4,36},{ 2,38},{ 4,38},{ 6,38},{ 8,38},{10,38},{12,38},{14,38},{16,38},{18,38},{20,38},{22,38},{24,38},{26,38},{28,38},{30,38},{32,38},{34,38},{36,38},{38,38},{40,38},{42,38},{44,38},{46,38},{48,38},{50,38},{52,38},{54,38},{56,38},{58,38},{60,38},{62,38},{64,38},{66,38},{68,38},{70,38},{72,38},{74,38},{76,38},{78,38},{80,38},{82,38},{84,38},{86,38},{88,38},{88,40},{86,40},{84,40},{82,40},{80,40},{78,40},{76,40},{74,40},{72,40},{70,40},{68,40},{66,40},{64,40},{62,40},{60,40},{58,40},{56,40},{54,40},{52,40},{50,40},{48,40},{46,40},{44,40},{42,40},{40,40},{38,40},{36,40},{34,40},{32,40},{30,40},{28,40},{26,40},{24,40},{22,40},{20,40},{18,40},{16,40},{14,40},{12,40},{10,40},{ 8,40},{ 6,40},{ 4,40},{ 2,40},{ 2,42},{ 4,42},{ 6,42},{ 8,42},{10,42},{12,42},{14,42},{16,42},{18,42},{20,42},{22,42},{24,42},{26,42},{28,42},{30,42},{32,42},{34,42},{36,42},{38,42},{40,42},{42,42},{44,42},{46,42},{48,42},{50,42},{52,42},{54,42},{56,42},{58,42},{60,42},{62,42},{64,42},{66,42},{68,42},{70,42},{72,42},{74,42},{76,42},{78,42},{80,42},{82,42},{84,42},{86,42},{88,42},{88,44},{86,44},{84,44},{82,44},{80,44},{78,44},{76,44},{74,44},{72,44},{70,44},{68,44},{66,44},{64,44},{62,44},{60,44},{58,44},{56,44},{54,44},{52,44},{50,44},{48,44},{46,44},{44,44},{42,44},{40,44},{38,44},{36,44},{34,44},{32,44},{30,44},{28,44},{26,44},{24,44},{22,44},{20,44},{18,44},{16,44},{14,44},{12,44},{10,44},{ 8,44},{ 6,44},{ 4,44},{ 2,44},{ 2,46},{ 4,46}},
    {{49,45},{51,45},{53,45},{55,45},{57,45},{59,45},{61,45},{63,45},{65,45},{67,45},{69,45},{71,45},{73,45},{75,45},{77,45},{79,45},{81,45},{83,45},{85,45},{87,45},{89,45},{87,47},{85,47},{83,47},{81,47},{79,47},{77,47},{75,47},{73,47},{71,47},{69,47},{67,47},{65,47},{63,47},{61,47},{59,47},{57,47},{55,47},{53,47},{51,47},{49,47},{47,47},{45,47},{43,47},{41,47},{39,47},{37,47},{35,47},{33,47},{31,47},{29,47},{27,47},{25,47},{23,47},{21,47},{19,47},{17,47},{15,47},{13,47},{11,47},{ 9,47},{ 7,47},{ 5,47},{ 3,47},{ 3,49},{ 5,49},{ 7,49},{ 9,49},{11,49},{13,49},{15,49},{17,49},{19,49},{21,49},{23,49},{25,49},{27,49},{29,49},{31,49},{33,49},{35,49},{37,49},{39,49},{41,49},{43,49},{45,49},{47,49},{49,49},{51,49},{53,49},{55,49},{57,49},{59,49},{61,49},{63,49},{65,49},{67,49},{69,49},{71,49},{73,49},{75,49},{77,49},{79,49},{81,49},{83,49},{85,49},{87,49},{87,51},{85,51},{83,51},{81,51},{79,51},{77,51},{75,51},{73,51},{71,51},{69,51},{67,51},{65,51},{63,51},{61,51},{59,51},{57,51},{55,51},{53,51},{51,51},{49,51},{47,51},{45,51},{43,51},{41,51},{39,51},{37,51},{35,51},{33,51},{31,51},{29,51},{27,51},{25,51},{23,51},{21,51},{19,51},{17,51},{15,51},{13,51},{11,51},{ 9,51},{ 7,51},{ 5,51},{ 3,51},{ 3,53},{ 5,53},{ 7,53},{ 9,53},{11,53},{13,53},{15,53},{17,53},{19,53},{21,53},{23,53},{25,53},{27,53},{29,53},{31,53},{33,53},{35,53},{37,53},{39,53},{41,53},{43,53},{45,53},{47,53},{49,53},{51,53},{53,53},{55,53},{57,53},{59,53},{61,53},{63,53},{65,53},{67,53},{69,53},{71,53},{73,53},{75,53},{77,53},{79,53},{81,53},{83,53},{85,53},{87,53},{87,55},{85,55},{83,55},{81,55},{79,55},{77,55},{75,55},{73,55},{71,55},{69,55},{67,55},{65,55},{63,55},{61,55},{59,55},{57,55},{55,55},{53,55},{51,55},{49,55},{47,55},{45,55},{43,55},{41,55},{39,55},{37,55},{35,55},{33,55},{31,55},{29,55},{27,55},{25,55},{23,55},{21,55},{19,55},{17,55},{15,55},{13,55},{11,55},{ 9,55},{ 7,55},{ 5,55},{ 3,55},{ 3,57},{ 5,57},{ 7,57},{ 9,57},{11,57},{13,57},{15,57},{17,57},{19,57},{21,57},{23,57},{25,57},{27,57},{29,57},{31,57},{33,57},{35,57},{37,57},{39,57},{41,57},{43,57},{45,57},{47,57},{49,57},{51,57},{53,57},{55,57},{57,57},{59,57},{61,57},{63,57},{65,57},{67,57},{69,57},{71,57},{73,57},{75,57},{77,57},{79,57},{81,57},{83,57},{85,57},{87,57},{85,59},{83,59},{81,59},{79,59},{77,59},{75,59},{73,59},{71,59},{69,59},{67,59},{65,59},{63,59},{61,59},{59,59},{57,59},{55,59},{53,59},{51,59},{49,59},{47,59},{45,59},{43,59},{41,59},{39,59},{37,59},{35,59},{33,59},{31,59},{29,59},{27,59},{25,59},{23,59},{21,59},{19,59},{17,59},{15,59},{13,59},{11,59},{ 9,59},{ 7,59},{ 5,59},{ 5,61},{ 7,61},{ 9,61},{11,61},{13,61},{15,61},{17,61},{19,61},{21,61},{23,61},{25,61},{27,61},{29,61},{31,61},{33,61},{35,61},{37,61},{39,61},{41,61},{43,61},{45,61},{47,61},{49,61},{51,61},{53,61},{55,61},{57,61},{59,61},{61,61},{63,61},{65,61},{67,61},{69,61},{71,61},{73,61},{75,61},{77,61},{79,61},{81,61},{83,61},{85,61},{83,63},{81,63},{79,63},{77,63},{75,63},{73,63},{71,63},{69,63},{67,63},{65,63},{63,63},{61,63},{59,63},{57,63},{55,63},{53,63},{51,63},{49,63},{47,63},{45,63},{43,63}},
    {{ 6,46},{ 8,46},{10,46},{12,46},{14,46},{16,46},{18,46},{20,46},{22,46},{24,46},{26,46},{28,46},{30,46},{32,46},{34,46},{36,46},{38,46},{40,46},{42,46},{44,46},{46,46},{48,46},{50,46},{52,46},{54,46},{56,46},{58,46},{60,46},{62,46},{64,46},{66,46},{68,46},{70,46},{72,46},{74,46},{76,46},{78,46},{80,46},{82,46},{84,46},{86,46},{88,46},{88,48},{86,48},{84,48},{82,48},{80,48},{78,48},{76,48},{74,48},{72,48},{70,48},{68,48},{66,48},{64,48},{62,48},{60,48},{58,48},{56,48},{54,48},{52,48},{50,48},{48,48},{46,48},{44,48},{42,48},{40,48},{38,48},{36,48},{34,48},{32,48},{30,48},{28,48},{26,48},{24,48},{22,48},{20,48},{18,48},{16,48},{14,48},{12,48},{10,48},{ 8,48},{ 6,48},{ 4,48},{ 2,48},{ 2,50},{ 4,50},{ 6,50},{ 8,50},{10,50},{12,50},{14,50},{16,50},{18,50},{20,50},{22,50},{24,50},{26,50},{28,50},{30,50},{32,50},{34,50},{36,50},{38,50},{40,50},{42,50},{44,50},{46,50},{48,50},{50,50},{52,50},{54,50},{56,50},{58,50},{60,50},{62,50},{64,50},{66,50},{68,50},{70,50},{72,50},{74,50},{76,50},{78,50},{80,50},{82,50},{84,50},{86,50},{88,50},{88,52},{86,52},{84,52},{82,52},{80,52},{78,52},{76,52},{74,52},{72,52},{70,52},{68,52},{66,52},{64,52},{62,52},{60,52},{58,52},{56,52},{54,52},{52,52},{50,52},{48,52},{46,52},{44,52},{42,52},{40,52},{38,52},{36,52},{34,52},{32,52},{30,52},{28,52},{26,52},{24,52},{22,52},{20,52},{18,52},{16,52},{14,52},{12,52},{10,52},{ 8,52},{ 6,52},{ 4,52},{ 2,52},{ 4,54},{ 6,54},{ 8,54},{10,54},{12,54},{14,54},{16,54},{18,54},{20,54},{22,54},{24,54},{26,54},{28,54},{30,54},{32,54},{34,54},{36,54},{38,54},{40,54},{42,54},{44,54},{46,54},{48,54},{50,54},{52,54},{54,54},{56,54},{58,54},{60,54},{62,54},{64,54},{66,54},{68,54},{70,54},{72,54},{74,54},{76,54},{78,54},{80,54},{82,54},{84,54},{86,54},{86,56},{84,56},{82,56},{80,56},{78,56},{76,56},{74,56},{72,56},{70,56},{68,56},{66,56},{64,56},{62,56},{60,56},{58,56},{56,56},{54,56},{52,56},{50,56},{48,56},{46,56},{44,56},{42,56},{40,56},{38,56},{36,56},{34,56},{32,56},{30,56},{28,56},{26,56},{24,56},{22,56},{20,56},{18,56},{16,56},{14,56},{12,56},{10,56},{ 8,56},{ 6,56},{ 4,56},{ 4,58},{ 6,58},{ 8,58},{10,58},{12,58},{14,58},{16,58},{18,58},{20,58},{22,58},{24,58},{26,58},{28,58},{30,58},{32,58},{34,58},{36,58},{38,58},{40,58},{42,58},{44,58},{46,58},{48,58},{50,58},{52,58},{54,58},{56,58},{58,58},{60,58},{62,58},{64,58},{66,58},{68,58},{70,58},{72,58},{74,58},{76,58},{78,58},{80,58},{82,58},{84,58},{86,58},{86,60},{84,60},{82,60},{80,60},{78,60},{76,60},{74,60},{72,60},{70,60},{68,60},{66,60},{64,60},{62,60},{60,60},{58,60},{56,60},{54,60},{52,60},{50,60},{48,60},{46,60},{44,60},{42,60},{40,60},{38,60},{36,60},{34,60},{32,60},{30,60},{28,60},{26,60},{24,60},{22,60},{20,60},{18,60},{16,60},{14,60},{12,60},{10,60},{ 8,60},{ 6,60},{ 4,60},{ 6,62},{ 8,62},{10,62},{12,62},{14,62},{16,62},{18,62},{20,62},{22,62},{24,62},{26,62},{28,62},{30,62},{32,62},{34,62},{36,62},{38,62},{40,62},{42,62},{44,62},{46,62},{48,62},{50,62},{52,62},{54,62},{56,62},{58,62},{60,62},{62,62},{64,62},{66,62},{68,62},{70,62},{72,62},{74,62},{76,62},{78,62},{80,62},{82,62},{84,62}},
    {{41,63},{39,63},{37,63},{35,63},{33,63},{31,63},{29,63},{27,63},{25,63},{23,63},{21,63},{19,63},{17,63},{15,63},{13,63},{11,63},{ 9,63},{ 7,63},{ 7,65},{ 9,65},{11,65},{13,65},{15,65},{17,65},{19,65},{21,65},{23,65},{25,65},{27,65},{29,65},{31,65},{33,65},{35,65},{37,65},{39,65},{41,65},{43,65},{45,65},{47,65},{49,65},{51,65},{53,65},{55,65},{57,65},{59,65},{61,65},{63,65},{65,65},{67,65},{69,65},{71,65},{73,65},{75,65},{77,65},{79,65},{81,65},{83,65},{83,67},{81,67},{79,67},{77,67},{75,67},{73,67},{71,67},{69,67},{67,67},{65,67},{63,67},{61,67},{59,67},{57,67},{55,67},{53,67},{51,67},{49,67},{47,67},{45,67},{43,67},{41,67},{39,67},{37,67},{35,67},{33,67},{31,67},{29,67},{27,67},{25,67},{23,67},{21,67},{19,67},{17,67},{15,67},{13,67},{11,67},{ 9,67},{ 7,67},{ 9,69},{11,69},{13,69},{15,69},{17,69},{19,69},{21,69},{23,69},{25,69},{27,69},{29,69},{31,69},{33,69},{35,69},{37,69},{39,69},{41,69},{43,69},{45,69},{47,69},{49,69},{51,69},{53,69},{55,69},{57,69},{59,69},{61,69},{63,69},{65,69},{67,69},{69,69},{71,69},{73,69},{75,69},{77,69},{79,69},{81,69},{79,71},{77,71},{75,71},{73,71},{71,71},{69,71},{67,71},{65,71},{63,71},{61,71},{59,71},{57,71},{55,71},{53,71},{51,71},{49,71},{47,71},{45,71},{43,71},{41,71},{39,71},{37,71},{35,71},{33,71},{31,71},{29,71},{27,71},{25,71},{23,71},{21,71},{19,71},{17,71},{15,71},{13,71},{11,71},{13,73},{15,73},{17,73},{19,73},{21,73},{23,73},{25,73},{27,73},{29,73},{31,73},{33,73},{35,73},{37,73},{39,73},{41,73},{43,73},{45,73},{47,73},{49,73},{51,73},{53,73},{55,73},{57,73},{59,73},{61,73},{63,73},{65,73},{67,73},{69,73},{71,73},{73,73},{75,73},{77,73},{77,75},{75,75},{73,75},{71,75},{69,75},{67,75},{65,75},{63,75},{61,75},{59,75},{57,75},{55,75},{53,75},{51,75},{49,75},{47,75},{45,75},{43,75},{41,75},{39,75},{37,75},{35,75},{33,75},{31,75},{29,75},{27,75},{25,75},{23,75},{21,75},{19,75},{17,75},{15,75},{13,75},{15,77},{17,77},{19,77},{21,77},{23,77},{25,77},{27,77},{29,77},{31,77},{33,77},{35,77},{37,77},{39,77},{41,77},{43,77},{45,77},{47,77},{49,77},{51,77},{53,77},{55,77},{57,77},{59,77},{61,77},{63,77},{65,77},{67,77},{69,77},{71,77},{73,77},{75,77},{73,79},{71,79},{69,79},{67,79},{65,79},{63,79},{61,79},{59,79},{57,79},{55,79},{53,79},{51,79},{49,79},{47,79},{45,79},{43,79},{41,79},{39,79},{37,79},{35,79},{33,79},{31,79},{29,79},{27,79},{25,79},{23,79},{21,79},{19,79},{17,79},{21,81},{23,81},{25,81},{27,81},{29,81},{31,81},{33,81},{35,81},{37,81},{39,81},{41,81},{43,81},{45,81},{47,81},{49,81},{51,81},{53,81},{55,81},{57,81},{59,81},{61,81},{63,81},{65,81},{67,81},{69,81},{67,83},{65,83},{63,83},{61,83},{59,83},{57,83},{55,83},{53,83},{51,83},{49,83},{47,83},{45,83},{43,83},{41,83},{39,83},{37,83},{35,83},{33,83},{31,83},{29,83},{27,83},{25,83},{23,83},{27,85},{29,85},{31,85},{33,85},{35,85},{37,85},{39,85},{41,85},{43,85},{45,85},{47,85},{49,85},{51,85},{53,85},{55,85},{57,85},{59,85},{61,85},{63,85},{57,87},{55,87},{53,87},{51,87},{49,87},{47,87},{45,87},{43,87},{41,87},{39,87},{37,87},{35,87},{33,87},{41,89},{43,89},{45,89},{47,89},{49,89},{ 0, 0},{ 0, 0},{ 0, 0}},
    {{84,64},{82,64},{80,64},{78,64},{76,64},{74,64},{72,64},{70,64},{68,64},{66,64},{64,64},{62,64},{60,64},{58,64},{56,64},{54,64},{52,64},{50,64},{48,64},{46,64},{44,64},{42,64},{40,64},{38,64},{36,64},{34,64},{32,64},{30,64},{28,64},{26,64},{24,64},{22,64},{20,64},{18,64},{16,64},{14,64},{12,64},{10,64},{ 8,64},{ 6,64},{ 8,66},{10,66},{12,66},{14,66},{16,66},{18,66},{20,66},{22,66},{24,66},{26,66},{28,66},{30,66},{32,66},{34,66},{36,66},{38,66},{40,66},{42,66},{44,66},{46,66},{48,66},{50,66},{52,66},{54,66},{56,66},{58,66},{60,66},{62,66},{64,66},{66,66},{68,66},{70,66},{72,66},{74,66},{76,66},{78,66},{80,66},{82,66},{82,68},{80,68},{78,68},{76,68},{74,68},{72,68},{70,68},{68,68},{66,68},{64,68},{62,68},{60,68},{58,68},{56,68},{54,68},{52,68},{50,68},{48,68},{46,68},{44,68},{42,68},{40,68},{38,68},{36,68},{34,68},{32,68},{30,68},{28,68},{26,68},{24,68},{22,68},{20,68},{18,68},{16,68},{14,68},{12,68},{10,68},{ 8,68},{10,70},{12,70},{14,70},{16,70},{18,70},{20,70},{22,70},{24,70},{26,70},{28,70},{30,70},{32,70},{34,70},{36,70},{38,70},{40,70},{42,70},{44,70},{46,70},{48,70},{50,70},{52,70},{54,70},{56,70},{58,70},{60,70},{62,70},{64,70},{66,70},{68,70},{70,70},{72,70},{74,70},{76,70},{78,70},{80,70},{78,72},{76,72},{74,72},{72,72},{70,72},{68,72},{66,72},{64,72},{62,72},{60,72},{58,72},{56,72},{54,72},{52,72},{50,72},{48,72},{46,72},{44,72},{42,72},{40,72},{38,72},{36,72},{34,72},{32,72},{30,72},{28,72},{26,72},{24,72},{22,72},{20,72},{18,72},{16,72},{14,72},{12,72},{12,74},{14,74},{16,74},{18,74},{20,74},{22,74},{24,74},{26,74},{28,74},{30,74},{32,74},{34,74},{36,74},{38,74},{40,74},{42,74},{44,74},{46,74},{48,74},{50,74},{52,74},{54,74},{56,74},{58,74},{60,74},{62,74},{64,74},{66,74},{68,74},{70,74},{72,74},{74,74},{76,74},{78,74},{76,76},{74,76},{72,76},{70,76},{68,76},{66,76},{64,76},{62,76},{60,76},{58,76},{56,76},{54,76},{52,76},{50,76},{48,76},{46,76},{44,76},{42,76},{40,76},{38,76},{36,76},{34,76},{32,76},{30,76},{28,76},{26,76},{24,76},{22,76},{20,76},{18,76},{16,76},{14,76},{16,78},{18,78},{20,78},{22,78},{24,78},{26,78},{28,78},{30,78},{32,78},{34,78},{36,78},{38,78},{40,78},{42,78},{44,78},{46,78},{48,78},{50,78},{52,78},{54,78},{56,78},{58,78},{60,78},{62,78},{64,78},{66,78},{68,78},{70,78},{72,78},{74,78},{70,80},{68,80},{66,80},{64,80},{62,80},{60,80},{58,80},{56,80},{54,80},{52,80},{50,80},{48,80},{46,80},{44,80},{42,80},{40,80},{38,80},{36,80},{34,80},{32,80},{30,80},{28,80},{26,80},{24,80},{22,80},{20,80},{22,82},{24,82},{26,82},{28,82},{30,82},{32,82},{34,82},{36,82},{38,82},{40,82},{42,82},{44,82},{46,82},{48,82},{50,82},{52,82},{54,82},{56,82},{58,82},{60,82},{62,82},{64,82},{66,82},{68,82},{64,84},{62,84},{60,84},{58,84},{56,84},{54,84},{52,84},{50,84},{48,84},{46,84},{44,84},{42,84},{40,84},{38,84},{36,84},{34,84},{32,84},{30,84},{28,84},{26,84},{30,86},{32,86},{34,86},{36,86},{38,86},{40,86},{42,86},{44,86},{46,86},{48,86},{50,86},{52,86},{54,86},{56,86},{58,86},{60,86},{54,88},{52,88},{50,88},{48,88},{46,88},{44,88},{42,88},{40,88},{38,88},{36,88},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0}}
  }
};

/*
// Sean's travel LED array
int[][][][] ledPhysLocs  = new int[][][][]
{ // Ports
  { // Strips
    {{ 2, 1},{ 4, 1},{ 6, 1},{ 8, 1},{10, 1},{12, 1},{14, 1},{ 0, 0}},
    {{ 2, 3},{ 4, 3},{ 6, 3},{ 8, 3},{10, 3},{12, 3},{14, 3},{ 0, 0}},
    {{ 2, 5},{ 4, 5},{ 6, 5},{ 8, 5},{10, 5},{12, 5},{14, 5},{ 0, 0}},
    {{ 2, 7},{ 4, 7},{ 6, 7},{ 8, 7},{10, 7},{12, 7},{14, 7},{ 0, 0}},
    {{15, 2},{13, 2},{11, 2},{ 9, 2},{ 7, 2},{ 5, 2},{ 3, 2},{ 1, 2}},
    {{15, 4},{13, 4},{11, 4},{ 9, 4},{ 7, 4},{ 5, 4},{ 3, 4},{ 1, 4}},
    {{15, 6},{13, 6},{11, 6},{ 9, 6},{ 7, 6},{ 5, 6},{ 3, 6},{ 1, 6}},
    {{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0}}
  }
};
*/

//String moviePath = "C:\\pub\\LocalDev\\Sean\\Processing2.0\\OctoWS2811\\examples\\VideoShapeSDcard\\Processing\\movie2shapeSdcard\\SunTest01_320x240_h264.mov";
//tring moviePath = "C:\\pub\\LocalDev\\Sean\\Processing2.0\\OctoWS2811\\examples\\VideoShapeSDcard\\Processing\\movie2shapeSdcard\\039341505-hd-sun-surface-solar-flares-3d_H264_420.mov";
//String moviePath = "C:\\pub\\LocalDev\\Sean\\Processing2.0\\OctoWS2811\\examples\\VideoShapeSDcard\\Processing\\movie2shapeSdcard\\output8.mov";
//String moviePath = "C:\\pub\\schtuffa\\2015-11-25 LED Sun\\media\\SunTest03\\SunTest03_320x240_30_90_5000_flip_01.mov";
//String moviePath = "C:\\priv\\Google Drive\\CFL\\LED Sun Krugman Studio\\LED_Sun\\MediaFiles\\Gen2\\Eyeball02_320x240_60_90_2000_01.mov";
//String moviePath = "C:\\priv\\Google Drive\\CFL\\LED Sun Krugman Studio\\LED_Sun\\MediaFiles\\Gen2\\Moon02_320x240_60_90_2000_01.mov";
//String moviePath = "C:\\pub\\LocalDev\\Sean\\Processing2.0\\OctoWS2811\\examples\\VideoShapeSDcard\\Processing\\movie2shapeSdcard\\SunSurface02_320x240_SaS_90_2000_01.mov";
String moviePath = "C:/priv/gd2/Dropbox/LocalDev/Sean/Processing/Processing3.0/videoExample01/SunSurface02_320x240_SaS_90_2000_01.mov";

//String[] outFileNames = {"F:\\VIDEO_01.BIN"};
String[] outFileNames = {"C:\\pub\\LocalDev\\Sean\\Processing2.0\\OctoWS2811\\examples\\VideoShapeSDcard\\Processing\\movie2shapeSdcard\\SunSurface02_320x240_SaS_90_2000_01_0_0_0_30.BIN"};
//String[] outFileNames = {"\\SCH-I545\\Card\\VIDEO_01.BIN"};
String[] serialPorts = {"COM24"}; 


float ledLocScaler = 2.0;
int ledLocXOffset = 0;
int ledLocYOffset = 0;

float hue = 0.0;
float brightness = 0.0;
float contrast = 1.0;
float gamma = 1.8;
float smoothing = 0.0;
float nSmoothWaves = 0;
float smoothMax = 2.0;
float smoothCenter = 0.0;
float testparam = 0.0;

float targetFrameRate = 30.0;

int maxVideoRes = 540;

// --------- END USER DEFINED VARIABLES ------------- //

Movie myMovie;

FileOutputStream[] outFiles = new FileOutputStream[outFileNames.length];     // edit output filename below...

int numPorts=0;  // the number of serial ports in use
int maxPorts=24; // maximum number of serial ports

Serial[] ledSerial = new Serial[maxPorts];     // each port's actual Serial port
PImage ledImage = new PImage(10, 10);            // image sent to each port

//float framerate = myParams.targetFrameRate;
float mFrameRateCounter;
int mFrameCounter = 0;
int dFrameCounter = 0;
float mFrameRate = targetFrameRate;

long elapsed_picoseconds=0L;
long elapsed_microseconds=0L;
long picoseconds_per_frame = (long)(1e12 / targetFrameRate + 0.5);

int[] gammatable = new int[256];

boolean filesopen=true;
boolean isPlaying = false;

boolean samplingPointsOn = true;
boolean serialOutOn = false;
boolean sampledValuesOn = true;
boolean movieOn = true;
boolean sdWriteOn = false;
boolean serialSdWriteOn = false;

int LOG_ERROR = 3;
int LOG_VERBOSE = 5;

int LOG_LEVEL = LOG_ERROR;

boolean ledImageLocked = false;

Params myParams;


int lastReportedTime = 0;

void setup() {
  size(10, 10);  // create the window
 
  myMovie = new Movie(this, moviePath);
  
  // Setup Params
  // ToDo: Params would be nice as a JSONObject
  myParams = new Params();
  myParams.ledLocScaler = ledLocScaler;
  myParams.ledLocXOffset = ledLocXOffset;
  myParams.ledLocYOffset = ledLocYOffset;
  myParams.hue = hue;
  myParams.brightness = brightness;
  myParams.contrast = contrast;
  myParams.gamma = gamma;
  myParams.smoothing = smoothing;
  myParams.nSmoothWaves = nSmoothWaves;
  myParams.smoothMax = smoothMax;
  myParams.smoothCenter = smoothCenter;
  myParams.targetFrameRate = targetFrameRate;
  myParams.maxVideoRes = maxVideoRes;
  myParams.ledPhysLocs = ledPhysLocs;
  
  println(myParams.toString());

  // Set up serial port(s)
  String[] list = Serial.list();
  delay(20);
  println("Serial Ports List:");
  println((Object[]) list);
  
  if (serialOutOn) {
    // Setup Serial
    setupSerialOut();
  }
  
  // Set up the Gamma table
  setupGammaTable(myParams.gamma);
  

  
  myMovie.frameRate(myParams.targetFrameRate);
  frameRate(myParams.targetFrameRate);
  
  if (sdWriteOn) {
    // Setup SD card write
    setupSdWrite();
    elapsed_picoseconds = 0L;
    elapsed_microseconds = 0L;
    myMovie.play();  // start the movie :-)
  } else {
    myMovie.loop();  // start the movie :-)
  }
  
  mFrameRateCounter = millis();
}
 
// movieEvent runs for each new frame of movie data
void movieEvent(Movie m) {
  // read the movie's next frame
  m.read();
  
  // Copy and adjust the frame image
  while(ledImageLocked) delay(1); // wait for image to be free
  ledImageLocked = true; // lock image
  // copy image
  ledImage = new PImage(m.width, m.height);
  ledImage.copy(m, 0, 0, m.width, m.height, 0, 0, m.width, m.height);
  // Resize the ledImage to improve speed
  if (ledImage.height > myParams.maxVideoRes) {
    ledImage.resize(0, myParams.maxVideoRes);
  }
  // Perform image adjustments
  adjustHue(ledImage, myParams.hue);  
  adjustBrightness(ledImage, myParams.brightness);
  adjustContrast(ledImage, myParams.contrast);  
  
  
  if (myParams.nSmoothWaves > 0) {
  //if (myParams.smoothing > 0) {
    //ledImage.filter(BLUR, myParams.smoothing);
    
    // Perform smoothing that changes over the course of the movie
    //myParams.nSmoothWaves = 2; // Number of cosine waves in movie duration
    //float myParams.smoothMax = 5; // Peak smoothing
    float smoothing;
    smoothing = cos(m.time() / m.duration() * TWO_PI * myParams.nSmoothWaves);
    // Flip and map cosine output to center/max smoothing 
    smoothing = map(smoothing, -1, 1, myParams.smoothCenter - myParams.smoothMax, myParams.smoothMax);
    smoothing = constrain(smoothing, 0, myParams.smoothMax); // Constrain 0 to smoothMax
    myParams.smoothing = smoothing;
  }
  if (myParams.smoothing > 0) {
    // Apply smoothing to the image
    ledImage.filter(BLUR, myParams.smoothing);
  }
  
  //}
  ledImageLocked = false; // unlock image

  // Write frame to the Teensy on each serial port
  if (serialOutOn) {
    // ShapeDisplay code
    //println("serialOutOn");
    for (int p=0; p < ledPhysLocs.length; p++) {  
      int offset = 3;
      byte[] ledData = new byte[(ledPhysLocs[p].length * ledPhysLocs[p][0].length * 3) + offset];
      
      // Extract LED data from the image
      shape2data(ledImage, ledData, p, offset);
      
      if (p == 0) {
        ledData[0] = '*';  // first Teensy is the frame sync master
        int usec = (int)((1000000.0 / myParams.targetFrameRate) * 0.75);
        ledData[1] = (byte)(usec);   // request the frame sync pulse
        ledData[2] = (byte)(usec >> 8); // at 75% of the frame time
      } else {
        ledData[0] = '%';  // others sync to the master board
        ledData[1] = 0;
        ledData[2] = 0;
      }
      // send the raw data to the LEDs  :-)
      try {  
        ledSerial[p].write(ledData); 
      } catch (Exception e) { 
        println("Error: serial write failed");
        e.printStackTrace();
        exit();
      } 
    }         
  }

  // Write frame to the video files
  if (sdWriteOn) {
    //println("sdWriteOn");
    elapsed_picoseconds += picoseconds_per_frame;
    int usec = (int)((elapsed_picoseconds / 1000000L) - elapsed_microseconds);
    elapsed_microseconds += (long)usec;
    if (LOG_LEVEL >= LOG_VERBOSE)  {
      println("usec = " + usec);
    }
    
    // convert the LED image to raw data
    for (int p=0; p < ledPhysLocs.length; p++) {  
      int offset = 5;
      byte[] ledData = new byte[(ledPhysLocs[p].length * ledPhysLocs[p][0].length * 3) + offset];
      shape2data(ledImage, ledData, p, offset);
      ledData[0] = '*';  // first Teensy is the frame sync master
      
      ledData[1] = (byte)(ledPhysLocs[p].length * ledPhysLocs[p][0].length);
      ledData[2] = (byte)((ledPhysLocs[p].length * ledPhysLocs[p][0].length) >> 8);
      ledData[3] = (byte)(usec);   // request the frame sync pulse
      ledData[4] = (byte)(usec >> 8); // at 75% of the frame time
      // send the raw data to the LEDs  :-)
      //ledSerial[i].write(ledData); 
      try {
        outFiles[p].write(ledData);
      } catch (Exception e) { 
        println("Error: " + outFileNames[p] + ".write failed");
        e.printStackTrace();
        exit();
      }
    }
    if (myMovie.time() >= myMovie.duration()) {
      println("Movie writing complete!");
      myMovie.stop();
      isPlaying = false;
      closeSdWrite();
    } 
  }
  
  if (serialSdWriteOn) {
    elapsed_picoseconds += picoseconds_per_frame;
    int usec = (int)((elapsed_picoseconds / 1000000L) - elapsed_microseconds);
    elapsed_microseconds += (long)usec;
    if (LOG_LEVEL >= LOG_VERBOSE)  {
      println("usec = " + usec);
    }
    
    // convert the LED image to raw data
    for (int p=0; p < ledPhysLocs.length; p++) {  
      int offset = 5;
      byte[] ledData = new byte[(ledPhysLocs[p].length * ledPhysLocs[p][0].length * 3) + offset];
      shape2data(ledImage, ledData, p, offset);
      ledData[0] = '*';  // first Teensy is the frame sync master
      
      ledData[1] = (byte)(ledPhysLocs[p].length * ledPhysLocs[p][0].length);
      ledData[2] = (byte)((ledPhysLocs[p].length * ledPhysLocs[p][0].length) >> 8);
      ledData[3] = (byte)(usec);   // request the frame sync pulse
      ledData[4] = (byte)(usec >> 8); // at 75% of the frame time

      // send the raw data to the LEDs  :-)
      try {  
        ledSerial[p].write(ledData); 
      } catch (Exception e) { 
        println("Error: serial write failed");
        e.printStackTrace();
        exit();
      } 
    }
  }
    
  // Print frame rate information
  mFrameRate = 1000/(millis() - mFrameRateCounter);
  if (mFrameRate < myParams.targetFrameRate * 0.9) {
    if (LOG_LEVEL >= LOG_VERBOSE) {
      println("frate: " + int(mFrameRate) + ", m, " + mFrameCounter);
    }
  }
  mFrameRateCounter = millis(); 
  mFrameCounter++; 
  
  // Report the time of the movie every 1/10 duration
  if (LOG_LEVEL >= LOG_ERROR) {
    if (((int) m.time()) > lastReportedTime ) {
      if ((((int) m.time()) % ((int)(m.duration() / 10))) == 0) {
        println("Movie.time() = " + m.time() + " / " + m.duration());
        println("Smoothing = " + myParams.smoothing);
        lastReportedTime = int(m.time());
      }
    }
  }
}

// Grab data from video frame specified by ledPhysLocs
void shape2data(PImage image, byte[] data, int port, int offset) {
  int mask;
  int pixel[] = new int[8];
  
  //println(port +","+ ledPhysLocs[port][0][0][0] +","+ image.width);
    
  for (int l=0; l<ledPhysLocs[port][0].length; l++) {
    for (int s=0; s < 8; s++) {
      
      // get position in image.pixels
      // pixel[s] = x + (y * w)
      if (ledPhysLocs[port][s][l][0] < 1 || ledPhysLocs[port][s][l][1] < 1) {
        pixel[s] = 0;
      } else {
        int pixNum = int((ledPhysLocs[port][s][l][0]-1)*myParams.ledLocScaler+myParams.ledLocXOffset) + // x offset
          int((ledPhysLocs[port][s][l][1]-1)*myParams.ledLocScaler+myParams.ledLocYOffset) * image.width;
        //println(pixNum + "," + image.width+ "," + image.height + "," + image.pixels.length);
        if (pixNum < image.pixels.length) {
          pixel[s] = image.pixels[pixNum];
        } else {
          pixel[s] = 0;
        }
      }
       
      // convert color
      pixel[s] = colorWiring(pixel[s]);
    }
            
    // convert 8 pixels to 24 bytes
    for (mask = 0x800000; mask != 0; mask >>= 1) {
      byte b = 0;
      for (int s=0; s < 8; s++) {
        if ((pixel[s] & mask) != 0) b |= (1 << s);
      }
      data[offset++] = b;
    }
  }
}

// translate the 24 bit color from RGB to the actual
// order used by the LED wiring.  GRB is the most common.
int colorWiring(int c) {
  int red = (c & 0xFF0000) >> 16;
  int green = (c & 0x00FF00) >> 8;
  int blue = (c & 0x0000FF);
  red = gammatable[red];
  green = gammatable[green];
  blue = gammatable[blue];
  return (green << 16) | (red << 8) | (blue); // GRB - most common wiring
}

// draw runs every time the screen is redrawn - show the movie...
void draw() {
  // Print frame rate information
  if (frameRate < myParams.targetFrameRate * 0.9) {
    if (LOG_LEVEL >= LOG_VERBOSE) {
      println("frate: " + int(frameRate) + ", d, " + dFrameCounter);
    }
  }
  dFrameCounter++;

  // ToDo: Is copying image required?
  while(ledImageLocked) delay(2); // wait for the image to be free
  ledImageLocked = true; // lock image
  // copy image
  PImage img = new PImage(ledImage.width, ledImage.height);
  img.copy(ledImage, 0, 0, ledImage.width, ledImage.height, 0, 0, ledImage.width, ledImage.height);
  ledImageLocked = false; // unlock image
  
  // Resize the display if necessary
  if (img.width > width || img.height > height) {
    surface.setResizable(true);
    println("reset frame size: " + img.width +","+ img.height +","+ width +","+ height);
    surface.setSize(img.width*2, img.height);
    surface.setResizable(false);
  }

  background(204);

  if (movieOn) {
    // show the original video
    image(img, 0, 0);
  }
 
  // Get a starting coordinate for calculating min/max
  Coordinate locMin = new Coordinate(max(1, ledPhysLocs[0][0][0][0]), max(1, ledPhysLocs[0][0][0][1]));
  Coordinate locMax = new Coordinate(max(1, ledPhysLocs[0][0][0][0]), max(1, ledPhysLocs[0][0][0][1]));
  
  // Draw locations of LED sampling from video
  for (int p=0; p<ledPhysLocs.length; p++) {
    for (int s=0; s<ledPhysLocs[p].length; s++) {
      for (int l=0; l<ledPhysLocs[p][s].length; l++) {
        pushMatrix();
          noFill();
          rectMode(CENTER);
                    
          if (ledPhysLocs[p][s][l][0] > 0 && ledPhysLocs[p][s][l][1] > 0) {
            // Capture the min and max LED locations
            if (ledPhysLocs[p][s][l][0] < locMin.x) locMin.x = ledPhysLocs[p][s][l][0];
            if (ledPhysLocs[p][s][l][1] < locMin.y) locMin.y = ledPhysLocs[p][s][l][1];
            if (ledPhysLocs[p][s][l][0] > locMax.x) locMax.x = ledPhysLocs[p][s][l][0];
            if (ledPhysLocs[p][s][l][1] > locMax.y) locMax.y = ledPhysLocs[p][s][l][1];
            
            if (samplingPointsOn) {
              stroke(255,255,255); 
              rect(int((ledPhysLocs[p][s][l][0]-1)*myParams.ledLocScaler+myParams.ledLocXOffset), 
                   int((ledPhysLocs[p][s][l][1]-1)*myParams.ledLocScaler+myParams.ledLocYOffset), 
                   2, 2);
            
              stroke(0,0,0);
              rect(int((ledPhysLocs[p][s][l][0]-1)*myParams.ledLocScaler+myParams.ledLocXOffset), 
                   int((ledPhysLocs[p][s][l][1]-1)*myParams.ledLocScaler+myParams.ledLocYOffset), 
                   4, 4);
            }
          }
        popMatrix();          
      }
    }
  }
  
  if (sampledValuesOn) {
    // Draw the sampled pixels to visualize LED data
    if (img.width !=0 && img.height != 0) {
      pushMatrix();
        float drawRad = 0.7; // Radius of the drawn rectangles
        
        // Calculate factor by which to scale up LED grid
        // ToDo: figure out why drawRad*2.5 is required (expected drawRad*2) 
        float scaleFactor = min(img.width / (locMax.x - locMin.x + drawRad*2.5), 
          img.height / (locMax.y - locMin.y + drawRad*2.5)); 
        translate(img.width, 0); // Translate to sit next to movie
        scale(scaleFactor); // Scale up to fill space
        translate(-locMin.x + drawRad, -locMin.y + drawRad); // Translate LED locations to start at origin
        rectMode(RADIUS);
        
        
        for (int p=0; p<ledPhysLocs.length; p++) {
          for (int s=0; s<ledPhysLocs[p].length; s++) {
            for (int l=0; l<ledPhysLocs[p][s].length; l++) {
              if (ledPhysLocs[p][s][l][0] > 0 && ledPhysLocs[p][s][l][1] > 0) {
                // Calculate the location sampled pixels
                int pixNum = int((ledPhysLocs[p][s][l][0]-1)*myParams.ledLocScaler+myParams.ledLocXOffset) +
                  (int((ledPhysLocs[p][s][l][1]-1)*myParams.ledLocScaler+myParams.ledLocYOffset) * img.width);
                //println(pixNum + "," + img.width+ "," + img.height + "," + img.pixels.length);
                //println(ledPhysLocs[p][s][l][0] + "," + ledPhysLocs[p][s][l][1] + ","
                //  + pixNum + "," + img.width + "," + img.height + "," + img.pixels.length);
                int pixel;
                if (pixNum < img.pixels.length) {
                  pixel = img.pixels[pixNum];
                } else {
                  pixel = 0;
                }
                //blendMode(ADD);
                noStroke();
                fill(pixel);
                rect(ledPhysLocs[p][s][l][0], ledPhysLocs[p][s][l][1], drawRad, drawRad); 
                //println((ledPhysLocs[p][s][l][0]-locMin.x + drawRad*2) * scaleFactor +img.width, width);
              }
            }
          }
        }
      popMatrix();
    }
  }
  
  if (sdWriteOn) {
    if (myMovie.time() >= myMovie.duration()) {
      println("Movie SD writing complete!");
      myMovie.stop();
      isPlaying = false;
      closeSdWrite();
    } 
  }
  
  if (serialSdWriteOn) {
    //if (myMovie.time() >= 10) {
    if (myMovie.time() >= myMovie.duration() - 1 / myParams.targetFrameRate) {
      println("Movie serial SD writing complete!");
      myMovie.stop();
      isPlaying = false;
      serialSdWriteOn = false;
      for (int p=0; p < ledPhysLocs.length; p++) {
        try {  
          ledSerial[p].write(']'); 
          String line = "";
          while (line != null) {
            print(line);
            delay(100);
            line = ledSerial[p].readStringUntil(10);
          }
        } catch (Exception e) { 
          println("Error: serial write failed");
          e.printStackTrace();
          exit();
        }
      }
    }
  }
}

// Setup SD card output file writing
void setupSdWrite() {
  // Set up the write files
  if (ledPhysLocs.length != outFileNames.length) {
    println("Error: ledPhysLocs.length != outFileNames.length");
    exit();
  }
  for (int i=0; i<outFileNames.length; i++) {
    try {
      println("Writing video file: " + outFileNames[i]);
      //println("Estimated write time: " + myMovie.duration());
      outFiles[i] = new FileOutputStream(outFileNames[i]);
    } catch (Exception e) {
      println("Error: " + outFileNames[i] + " file open failed");
      //e.printStackTrace();
      sdWriteOn = false;
      //exit();
    }
  }
  filesopen = true;
}

// Close SD card output file writing
void closeSdWrite() {
  if (filesopen) {
    println("movie stop, closing output file");
    for (int i=0; i<outFileNames.length; i++) {
      try {
        println("Closing file: " + outFileNames[i]);
        outFiles[i].close();
      } catch (Exception e) {  
        println("Error: " + outFileNames[i] + " file close failed");
        //e.printStackTrace();
        //exit();
      }
    }
    filesopen = false;
  }
  sdWriteOn = false;
}

// Prints the ledPhysLocs array to the output
void printLedPhysLocs() {
  println("ledPhysLocs=");
  println("{");
  for (int p=0; p<ledPhysLocs.length; p++) { 
    println(" {");
    for (int s=0; s<ledPhysLocs[p].length; s++) {
      print("  {");
      for (int l=0; l<ledPhysLocs[p][s].length; l++) {
        print("{");
        for (int c=0; c<ledPhysLocs[p][s][l].length; c++) {
          if (ledPhysLocs[p][s][l][c] > -1 && ledPhysLocs[p][s][l][c] < 10) {
            print(" "); // Print an extra character to keep printing justified
          }
          print(ledPhysLocs[p][s][l][c]);
          if (c < ledPhysLocs[p][s][l].length - 1) {
            print(","); // Print a comma if it's not the last element
          }
        }
        print("}");
        if (l < ledPhysLocs[p][s].length - 1) {
          print(","); // Print a comma if it's not the last element
        }
      }
      println("}");
    }
    println(" }");
  }
  println("}");
}  

// Setup all serial ports
boolean setupSerialOut() {
  // Setup Serial Ports
  if (ledPhysLocs.length != serialPorts.length) {
    println("Error: ledPhysLocs.length != serialPorts.length");
    exit();
  }
  int errorCount = 0; 
  for (int i=0; i<serialPorts.length; i++) {
    errorCount += serialConfigure(i); 
    // Print the LED physical locations to output  
    if (errorCount == 0) {  
      printLedPhysLocs();
    }
  }
  // If any serial ports fail, turn off serial out
  // ToDo: Make each port toggle independently?
  if (errorCount == 0) { 
    return true;
  } else {
    closeSerialOut();
    return false;
  }
}

// Close all serial ports
void closeSerialOut() {
  serialOutOn = false;
  for (int i=0; i<serialPorts.length; i++) {
    try {
      println("Closing serial port: " + serialPorts[i]);
      ledSerial[i].stop();
    } catch (Exception e) {
      println("Error: " + serialPorts[i] + ".stop() failed");
      //e.printStackTrace();
      //exit();
    }
  }
  numPorts = 0;
}

// ask a Teensy board for its LED configuration, and set up the info for it.
int serialConfigure(int port) {
  String portName = serialPorts[port];
  
  int errorCount = 0;
  
  numPorts++;
  
  if (numPorts >= maxPorts) {
    println("too many serial ports, please increase maxPorts: ");
    errorCount++;
    return errorCount;
  }
  try {
    ledSerial[port] = new Serial(this, portName);
    if (ledSerial[port] == null) throw new NullPointerException();
    // Clear the serial buffer
    String line = "";
    while (line != null) {
      delay(100);
      line = ledSerial[port].readStringUntil(10);
      print(line);
    }
    // Switch Teensy to SERIAL_MODE
    ledSerial[port].write('^');
    delay(50);
    println(serialPorts[port] + ": " + ledSerial[port].readStringUntil(10));
    ledSerial[port].write('?');
  } catch (Throwable e) {
    println("Serial port " + portName + " does not exist or is non-functional");
    e.printStackTrace();
    errorCount++;
    return errorCount;
  }
  delay(50);
  String line = ledSerial[port].readStringUntil(10);
  if (line == null) {
    println("Serial port " + portName + " is not responding.");
    println("Is it really a Teensy 3.0 running VideoDisplay?");
    errorCount++;
    return errorCount;
  }
  print(line);
  String param[] = line.split(",");
  if (param == null || param.length < 2) {
    println("Error: port " + portName + " did not return array size from LED config query");
    errorCount++;
    return errorCount;
  }

  if (int(param[1]) != ledPhysLocs[port].length) {
    println("Error: nStrips doesn't match for port " + portName);
    errorCount++;
    return errorCount;
  }  
  
  if (int(param[0]) != ledPhysLocs[port][0].length) {
    println("Error: nLedsPerStrip doesn't match for port " + portName);
    errorCount++;
    return errorCount;
  }  
  
  return errorCount;
}

void setupGammaTable(float gamma) {
    // Set up the Gamma table
  for (int i=0; i < 256; i++) {
    gammatable[i] = (int)(pow((float)i / 255.0, gamma) * 255.0 + 0.5);
  }
}

// adjustBrightness(PImage img, float value)
// value range: -255 to 255
void adjustBrightness(PImage img, float value) {
  if (value != 0) {
    colorMode(RGB, 255);
    for (int x = 0; x < img.width; x++) {
      for (int y = 0; y < img.height; y++ ) {
        int loc = x + y*img.width;     
        float r,g,b;
        r = red (img.pixels[loc]);
        g = green (img.pixels[loc]);
        b = blue (img.pixels[loc]);
        r += value;
        g += value;
        b += value;
        r = constrain(r, 0, 255);
        g = constrain(g, 0, 255);
        b = constrain(b, 0, 255);
        color c = color(r, g, b);
        img.pixels[y*img.width + x] = c;
        
      }
    }                     
  }
}

// adjustBrightness(PImage img, float value)
// value range: 1.0 to 255
void adjustContrast(PImage img, float value) {
  if (value != 1.0) {
    colorMode(RGB, 255);
    for (int x = 0; x < img.width; x++) {
      for (int y = 0; y < img.height; y++ ) {
        int loc = x + y*img.width;
        float r,g,b;
        r = red (img.pixels[loc]);
        g = green (img.pixels[loc]);
        b = blue (img.pixels[loc]);
        r = (r-128) * value + 128;
        g = (g-128) * value + 128;
        b = (b-128) * value + 128;
        r = constrain(r, 0, 255);
        g = constrain(g, 0, 255);
        b = constrain(b, 0, 255);
        color c = color(r, g, b);
        img.pixels[y*img.width + x] = c;
      }
    }
  }
}

// adjustBrightness(PImage img, float value)
// value range: -255 to 255
void adjustHue(PImage img, float value) {
  if (value % 255 != 0) {
    colorMode(HSB, 255);
    for (int x = 0; x < img.width; x++) {
      for (int y = 0; y < img.height; y++ ) {
        int loc = x + y*img.width;
        float h = hue(img.pixels[loc]);
        h += value;
        h = h % 255; 
        img.pixels[y*img.width + x] = color(h, saturation(img.pixels[loc]), brightness(img.pixels[loc]));
      }
    }                     
  }
}

// scale a number by a percentage, from 0 to 100
int percentage(int num, int percent) {
  double mult = percentageFloat(percent);
  double output = num * mult;
  return (int)output;
}

// scale a number by the inverse of a percentage, from 0 to 100
int percentageInverse(int num, int percent) {
  double div = percentageFloat(percent);
  double output = num / div;
  return (int)output;
}

// convert an integer from 0 to 100 to a float percentage
// from 0.0 to 1.0.  Special cases for 1/3, 1/6, 1/7, etc
// are handled automatically to fix integer rounding.
double percentageFloat(int percent) {
  if (percent == 33) return 1.0 / 3.0;
  if (percent == 17) return 1.0 / 6.0;
  if (percent == 14) return 1.0 / 7.0;
  if (percent == 13) return 1.0 / 8.0;
  if (percent == 11) return 1.0 / 9.0;
  if (percent ==  9) return 1.0 / 11.0;
  if (percent ==  8) return 1.0 / 12.0;
  return (double)percent / 100.0;
}

class Coordinate {
  public float x;
  public float y;
  public Coordinate(float _x, float _y) {
    x = _x;
    y = _y;
  }
}

// Class Params
// Used to store, save, and load parameters
// NOTE: Only works for int, float, String variable types
//
//   void load() - Loads parameters from paramFileName
//   void save() - Saves parameters to paramFileName
//   String toString() - Returns a list of the parameters and values
//
// ToDo: Make methods work for arrays and possibly other object types. 
class Params {
  public float ledLocScaler;
  public int ledLocXOffset;
  public int ledLocYOffset;
  public float hue;
  public float brightness;
  public float contrast;
  public float smoothing;
  public float nSmoothWaves;
  public float smoothMax;
  public float smoothCenter;
  public float gamma;
  public float targetFrameRate;
  public int maxVideoRes;
  public int[][][][] ledPhysLocs;
  
  public String paramFileName = "params.txt";
 
  public Params() {
  }

  public void load() {
    // Read from file
    //BufferedReader reader = createReader(paramFileName);
    String lines[] = loadStrings(paramFileName);
    if (lines == null) return;
    Field[] fields = this.getClass().getDeclaredFields();
    //print field names paired with their values
    for ( Field field : fields  ) {
      //print(field.getName());
      for (String line : lines) {
        String[] m = match(line, field.getName());
        if (m != null) {
          //print(" *" + m.length);
          Class type = field.getType();
          String typeStr = type.toString();
          //print(typeStr);
          String[] tokens = splitTokens(line);
          if (tokens != null && tokens.length > 1) {
            if (type.isArray()) {
              
            }else if (typeStr.equals("int")) {
              try {
                field.set(this, int(tokens[1]));
              } catch (Exception e) {
                println("typeStr.equals(int) failed");
                e.printStackTrace();
              }
            }else if (typeStr.equals("float")) {
              try {
                field.set(this, float(tokens[1]));
              } catch (Exception e) {
                println("typeStr.equals(float) failed");
                e.printStackTrace();
              }
            }else if (typeStr.equals("class java.lang.String")) {
              try {
                field.set(this, tokens[1]);
              } catch (Exception e) {
                println("typeStr.equals(string) failed");
                e.printStackTrace();
              }
            }
          }
        }
      }
      println();
    }
  }
  
  public void save() {
    // save to file
    PrintWriter paramFile = createWriter(paramFileName);
    paramFile.print(this.toString());
    paramFile.flush();
    paramFile.close();
  }
  
  public String toString() {
    StringBuilder result = new StringBuilder();
    String newLine = System.getProperty("line.separator");
  
    result.append( this.getClass().getName() );
    result.append( " Object {" );
    result.append(newLine);
  
    //determine fields declared in this class only (no fields of superclass)
    Field[] fields = this.getClass().getDeclaredFields();
  
    //print field names paired with their values
    for ( Field field : fields  ) {
      result.append("  ");
      try {
        result.append( field.getName() );
        result.append(": ");
        //requires access to private field:
        result.append( field.get(this) );
      } catch ( IllegalAccessException e ) {
        //System.out.println(e);
        e.printStackTrace();
      }
      result.append(newLine);
    }
    result.append("}");
  
    return result.toString();
  }
}
// -------- END CLASS PARAMS --------- //

void loadLedLocsFromJson() {
  println("Loading LED locations from file...");
  
  // NOTE: This only works if the JSON conforms to int[][][][]
  // i.e. all ports must have the same number of strips and all 
  // strips must have the same number of LEDs
  
  // ToDo: rework code to no longer use int[][][][]
  
  boolean dimsLoaded = false;
  
  JSONObject ledPhysLocsJSON = new JSONObject();
  ledPhysLocsJSON = loadJSONObject("ledPhysLocs.json");
  
  JSONArray ports = ledPhysLocsJSON.getJSONArray("ports");
  //ledPhysLocs.resize(ports.size());
  for (int p=0; p<ports.size(); p++) {
    JSONObject port = ports.getJSONObject(p);
    JSONArray strips = port.getJSONArray("strips");
    for (int s=0; s<strips.size(); s++) {
      JSONObject strip = strips.getJSONObject(s);
      JSONArray leds = strip.getJSONArray("leds");
      for (int l=0; l<leds.size(); l++) {
        if (!dimsLoaded) {
          // We have new dims loaded
          dimsLoaded = true;
          ledPhysLocs = new int[ports.size()][strips.size()][leds.size()][3];
        }
        JSONObject led = leds.getJSONObject(l);
        ledPhysLocs[p][s][l][0] = led.getInt("x");
        ledPhysLocs[p][s][l][1] = led.getInt("y");
        ledPhysLocs[p][s][l][2] = led.getInt("radius");
      }
    }
  }
}

void saveLedLocsToJson() {
  println("Saving LED locations to file...");

  // JSON structure  
  //{'ports': [ 
  //    {'strips': [ 
  //        {'leds': [
  //            {'x': , 'y': , 'radius': },
  //            {'x': , 'y': , 'radius': },
  //            {'x': , 'y': , 'radius': }
  //        ] },
  //        {'leds': [
  //            {'x': , 'y': , 'radius': },
  //            {'x': , 'y': , 'radius': }
  //        ] }
  //    ] }
  //] }
  
  JSONObject ledPhysLocsJSON = new JSONObject();
  JSONArray ports = new JSONArray();
  for (int p=0; p<ledPhysLocs.length; p++) {
    JSONObject port = new JSONObject();
    JSONArray strips = new JSONArray();
    for (int s=0; s<ledPhysLocs[p].length; s++) {
      JSONObject strip = new JSONObject();
      JSONArray leds = new JSONArray();
      for (int l=0; l<ledPhysLocs[p][s].length; l++) {
        JSONObject led = new JSONObject();
        led.setInt("x", ledPhysLocs[p][s][l][0]);
        led.setInt("y", ledPhysLocs[p][s][l][1]);
        led.setInt("radius", 1);
        leds.setJSONObject(l, led);
      }
      strip.setJSONArray("leds", leds);
      strips.setJSONObject(s, strip);
    }
    port.setJSONArray("strips", strips);
    ports.setJSONObject(p, port);
  }
  ledPhysLocsJSON.setJSONArray("ports", ports);
  
  saveJSONObject(ledPhysLocsJSON, "ledPhysLocs.json");
}

// respond to mouse clicks as pause/play
void mousePressed() {
  if (isPlaying) {
    myMovie.pause();
    isPlaying = false;
  } else {
    try {
      if (sdWriteOn || serialSdWriteOn) {
        myMovie.play();
      } else {
        myMovie.loop();
      }
      isPlaying = true;
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}

void keyReleased() {
  if (key == '^') {
    if (!serialSdWriteOn) {
      // Only start serialOut if not in serialSdWriteOn mode
      if (!serialOutOn) {
        closeSerialOut();
        if (setupSerialOut()) serialOutOn = true;
      } else {
        closeSerialOut();
      }
    } else {
      println("Can't enable serialOutOn when serialSdWriteOn");
    }
    println("serialOutOn=" + serialOutOn);
  } else if (key == '!') {
    if (!serialSdWriteOn) {            
      if (!serialOutOn) {
        // Setup serial if necessary
        // If serial doesn't work don't continue
        if (!setupSerialOut()) return;
      }
      myMovie.stop();
      for (int p=0; p < ledPhysLocs.length; p++) {
        try {  
          print("serialPort[" + p + "]: \n");
          ledSerial[p].write('!'); 
          String line = "";
          int tries = 0;
          while (tries < 500) {
            if (line != null) {
              print(line);
              // Check for an error message
              if (match(line, "error:") != null) {
                println("Error detected");
                serialSdWriteOn = false;
                return;
              } else if (match(line, "File opened:") != null) {
                
                serialOutOn = false;
                serialSdWriteOn = true;
                break;
              }
            }
            delay(20); // Wait for all messages to come through
            line = ledSerial[p].readStringUntil(10);
            tries++;
          }
        } catch (Exception e) { 
          println("Error: serial write failed");
          e.printStackTrace();
          exit();
        }
      }
      if (serialSdWriteOn) {
        elapsed_picoseconds = 0L;
        elapsed_microseconds = 0L;
        myMovie.play();
        println("Estimated write time: " + myMovie.duration() 
          * targetFrameRate/mFrameRate + " seconds");
      } 
    } else {
      // Stop the serial SD write
      println("Stopping movie serial SD writing!");
      myMovie.stop();
      isPlaying = false;
      serialSdWriteOn = false;
      for (int p=0; p < ledPhysLocs.length; p++) {
        try {  
          ledSerial[p].write(']'); 
          String line = "";
          while (line != null) {
            print(line);
            delay(100);
            line = ledSerial[p].readStringUntil(10);
          }
        } catch (Exception e) { 
          println("Error: serial write failed");
          e.printStackTrace();
          exit();
        }
      }
      myMovie.loop();
      isPlaying = true;
    }
    println("serialSdWriteOn=" + serialSdWriteOn);
  } 
  /*else if (key == 'm') {
    // Toggle movie display
    movieOn = !movieOn;
    println("movieOn=" + movieOn);
  } */
  else if (key == 'v') {
    // Toggle sampling display
    sampledValuesOn = !sampledValuesOn;
    println("sampledValuesOn=" + sampledValuesOn);
  } else if (key == 'p') {
    // Toggle sampling grid
    samplingPointsOn = !samplingPointsOn;
    println("samplingPointsOn=" + samplingPointsOn);
  } else if (key == 'w') {
    // Toggle SD card writing
    myMovie.stop();
    sdWriteOn = !sdWriteOn;
    println("sdWriteOn=" + sdWriteOn);
    if (sdWriteOn) {
      // Restart video from beginning and play once
      //myMovie.stop();
      setupSdWrite();
      elapsed_picoseconds = 0L;
      elapsed_microseconds = 0L;
      myMovie.play();
      println("Estimated write time: " + myMovie.duration() 
          * targetFrameRate/mFrameRate + " seconds");
    } else {
      closeSdWrite();
      // Turn on video looping
      myMovie.loop();
    }
    println("myMovie.time()=" + myMovie.time());
  } else if (key == 'L') {
    LOG_LEVEL = (LOG_LEVEL+1) % 6;
    println("LOG_LEVEL=" + LOG_LEVEL);
  }  else if (key == 'l') {
    LOG_LEVEL = (LOG_LEVEL-1) % 6;
    println("LOG_LEVEL=" + LOG_LEVEL);
  } else if (key == '{') {
    println("Loading Parameters: " + myParams.paramFileName);
    myParams.load();
    println(myParams.toString());
    loadLedLocsFromJson();
  } else if (key == '}') {
    println("Saving Parameters: " + myParams.paramFileName);
    println(myParams.toString());
    myParams.save();
    saveLedLocsToJson();
  } else if (key == '&') {
    serialOutOn = false;
    delay(50);
    // Send the Teensies into SD_CARD_MODE
    println("Sending Teensies into SD_CARD_MODE");
    for (int p=0; p<serialPorts.length; p++) {
      if (ledSerial[p] != null) {
        ledSerial[p].write(key);
        print("serialPort[" + p + "]: \n");
        String line = "";
        while (line != null) {
          print(line);
          delay(200);
          line = ledSerial[p].readStringUntil(10);
        }
      }
    }
    //closeSerialOut();
    //exit();
  }
}

void keyPressed() {
  // ToDo:
  // Hue h/H
  if (key == 'S') {
    myParams.smoothing = min(1920, myParams.smoothing + 1);
    println("Smoothing=" + myParams.smoothing);
  }
  if (key == 's') {
    myParams.smoothing = max(0, myParams.smoothing - 1);
    println("Smoothing=" + myParams.smoothing);
  }
  if (key == 'N') {
    myParams.nSmoothWaves = min(1920, myParams.nSmoothWaves + 1);
    println("nSmoothWaves=" + myParams.nSmoothWaves);
  }
  if (key == 'n') {
    myParams.nSmoothWaves = max(0, myParams.nSmoothWaves - 1);
    println("nSmoothWaves=" + myParams.nSmoothWaves);
  }
  if (key == 'M') {
    myParams.smoothMax = min(1920, myParams.smoothMax + 1);
    println("smoothMax=" + myParams.smoothMax);
  }
  if (key == 'm') {
    myParams.smoothMax = max(0, myParams.smoothMax - 1);
    println("smoothMax=" + myParams.smoothMax);
  }
  if (key == 'B') {
    myParams.brightness = min(255, myParams.brightness + 1);
    println("Brightness=" + myParams.brightness);
  }
  if (key == 'b') {
    myParams.brightness = max(-255, myParams.brightness - 1);
    println("Brightness=" + myParams.brightness);
  }
  if (key == 'C') {
    myParams.contrast = min(128, myParams.contrast * 1.05);
    println("Contrast=" + myParams.contrast);
  }
  if (key == 'c') {
    myParams.contrast = max(0, myParams.contrast / 1.05);
    println("Contrast=" + myParams.contrast);
  }
  if (key == 'H') {
    myParams.hue = min(255, myParams.hue + 1);
    println("Hue=" + myParams.hue);
  }
  if (key == 'h') {
    myParams.hue = max(-255, myParams.hue - 1);
    println("Hue=" + myParams.hue);
  }
  if (key == 'G') {
    myParams.gamma = min(10, myParams.gamma + 0.05);
    println("Gamma=" + myParams.gamma);
    setupGammaTable(myParams.gamma);
  }
  if (key == 'g') {
    myParams.gamma = max(0, myParams.gamma - 0.05);
    println("Gamma=" + myParams.gamma);
    setupGammaTable(myParams.gamma);
  }
  if (key == 'F') {
    myParams.targetFrameRate = myParams.targetFrameRate * 1.05;
    println("targetFrameRate=" + myParams.targetFrameRate);
    picoseconds_per_frame = (long)(1e12 / myParams.targetFrameRate + 0.5);
    myMovie.frameRate(myParams.targetFrameRate);
    //frameRate(myParams.targetFrameRate);
  }
  if (key == 'f') {
    // Frame rates lower than 15.5Hz will overflow uint usec on Teensy
    myParams.targetFrameRate = max(15.5, myParams.targetFrameRate /1.05);
    println("targetFrameRate=" + myParams.targetFrameRate);
    picoseconds_per_frame = (long)(1e12 / myParams.targetFrameRate + 0.5);
    myMovie.frameRate(myParams.targetFrameRate);
    //frameRate(myParams.targetFrameRate);
  }  if (key == '+') {
    myParams.ledLocScaler = max(1, myParams.ledLocScaler *1.05);
    println("Scaler=" + myParams.ledLocScaler);
  } else if (key == '-') {
    myParams.ledLocScaler = max(1, myParams.ledLocScaler /1.05);
    println("Scaler=" + myParams.ledLocScaler);
  } else if (keyCode == UP) {
    myParams.ledLocYOffset = max(0, myParams.ledLocYOffset - 2);
    println("YOffset=" + myParams.ledLocYOffset);
  }  else if (keyCode == DOWN) {
    myParams.ledLocYOffset = max(0, myParams.ledLocYOffset + 2);
    println("YOffset=" + myParams.ledLocYOffset);
  }  else if (keyCode == LEFT) {
    myParams.ledLocXOffset = max(0, myParams.ledLocXOffset - 2);
    println("XOffset=" + myParams.ledLocXOffset);
  }  else if (keyCode == RIGHT) {
    myParams.ledLocXOffset = max(0, myParams.ledLocXOffset + 2);
    println("XOffset=" + myParams.ledLocXOffset);
  }  
  //println(keyCode);
}
